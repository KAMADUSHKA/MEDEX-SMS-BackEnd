const nats = require("node-nats-streaming");
class Listener {
  subject;
  queueGroupName;
  stan;
  client;
  ackWait = 5 * 1000;
  constructor(client, subject, queueGroupName) {
    this.client = client;
    this.subject = subject;
    this.queueGroupName = queueGroupName;
  }
  subscriptionOptions() {
    return this.client
      .subscriptionOptions()
      .setDeliverAllAvailable()
      .setManualAckMode(true)
      .setAckWait(this.ackWait)
      .setDurableName(this.queueGroupName)
      .toString();
  }
  listen() {
    const subscription = this.client.subscribe(
      this.subject,
      //queue groups
      this.queueGroupName,
      this.subscriptionOptions
    );
    subscription.on("message", (msg) => {
      const parsedData = this.parseMessage(msg);
      console.log(
        "NATS sequence id " +
          msg.getSequence() +
          "message received " +
          this.subject +
          " queueGroup:" +
          this.queueGroupName
      );

      this.onMessage(parsedData, msg);
    });
  }
  parseMessage(msg) {
    const data = msg.getData();
    if (typeof msg === "string" || msg instanceof String) {
      return JSON.parse(data);
    } else {
      return JSON.parse(data.toString("utf8"));
    }
  }
  onMessage(parsedData, msg) {
    throw new Error("onMessage must be implemented");
  }
}
module.exports = Listener;
